import RenderObject from "../interfaces/render-object";
/**
 * 值得注意的是，可能会有一些组合的指令
 * 比如  size+angle=拖拽
 * 需要另外声明出一个类型出来 drag
 */
interface OperationType {
    "size": Size;
    "angle": number;
    "scale": number;
    "position": Vector;
    "drag": {
        angle: number;
        size: Size;
    };
}
interface OperationObserverType {
    report(value: any, type: keyof OperationType): void;
    beforeReport(value: any, type: keyof OperationType): void;
    didChangeAngle(angle: number): void;
    didChangeSize(size: Size): void;
    didChangePosition(position: Vector): void;
    didChangeScale(scale: number): void;
    didDrag(value: {
        size: Size;
        angle: number;
    }): void;
    onHide(): void;
}
/**
 * 被观察者应该实现的抽象类
 */
declare abstract class ObserverObj {
    observer: Observer;
    addObserver(observer: Observer): void;
    removeObserver(): void;
}
declare class Observer {
    private master;
    constructor(master: OperationObserver);
    report(value: any, type: keyof OperationType): void;
    beforeReport(value: any, type: keyof OperationType): void;
}
/**
 * 操作监听节点
 * 监听栈节点
 * 每个节点都分为不同总类
 * 枚举
 * 根据枚举节点存储不同的数据
 */
declare class RecordNode {
    key: number | string;
    private _key;
    private _type;
    private _data;
    constructor(type: keyof OperationType);
    setData<T>(data: T): void;
    get data(): typeof this._data;
    get type(): keyof OperationType;
}
/**
 * 如果需要撤销操作，组件必须继承该抽象类实现
 */
declare abstract class OperationObserver implements OperationObserverType {
    onHide(): void;
    private obj;
    private recordClazz;
    /**
     * 添加被观察者
     * @param obj
     */
    addObserver(obj: RenderObject): void;
    /**
     * 改变后
     * 记录,先粗略copy对象存储，后如需优化可以转json存储
     */
    record(value: any, type: keyof OperationType): void;
    /**
     * @description 改变前
     * @param value
     * @param type
     */
    beforeReport(value: any, type: keyof OperationType): void;
    /**
     * 汇报观察情况，调用对应函数
     * @param value
     * @param type
     */
    report(value: any, type: keyof OperationType): void;
    removeObserver(): void;
    didChangeAngle(angle: number): void;
    didChangeSize(size: Size): void;
    didChangePosition(position: Vector): void;
    didChangeScale(scale: number): void;
    didDrag(value: {
        size: Size;
        angle: number;
    }): void;
}
export default OperationObserver;
export { ObserverObj, OperationType, RecordNode };
//# sourceMappingURL=operation-observer.d.ts.map