import { FuncButtonTrigger } from "../enums";
import RenderObject from "../interfaces/render-object";
import Painter from "../painter";
import Rect from "../rect";
import Vector from "../vector";
import ViewObject from "./view-object";
export declare abstract class Button implements RenderObject {
    constructor(master: ViewObject);
    name: string;
    disabled: boolean;
    rect: Rect;
    key: string | number;
    relativeRect: Rect;
    master: ViewObject;
    radius: number;
    senseRadius: number;
    oldAngle: number;
    originDistance: number;
    private scaleWithMaster;
    private canBeeLocking;
    private originPositionWithSize;
    get isFree(): boolean;
    set free(canBeeLocking: boolean);
    options: {
        percentage?: [x: number, y: number];
        position?: Vector;
    };
    /**
     * 重置按钮坐标
     */
    reset(): void;
    /**
     * @description 设置相对定位
     * @param options
     */
    init(options: {
        percentage?: [x: number, y: number];
        position?: Vector;
    }): void;
    abstract trigger: FuncButtonTrigger;
    abstract setMaster(master: RenderObject): void;
    abstract effect(rect?: Rect): void;
    abstract updatePosition(vector: Vector): void;
    abstract draw(paint: Painter): void;
    abstract update(paint: Painter): void;
    abstract onSelected(): void;
    get getAbsolutePosition(): Vector;
    get getRelativePosition(): Vector;
    setAbsolutePosition(vector?: Vector): void;
    isInArea(event: Vector, target: Vector): boolean;
    /**
     * @description 根据父Box的大小宽度比作为基础定位
     * @param percentage ,占比值，四个点坐标
     */
    setRelativePositionRect(percentage: [x: number, y: number]): void;
    updateRelativePosition(): void;
    setRelativePosition(position: Vector): void;
    hide(): void;
    setSenseRadius(senseRadius: number): void;
    abstract drawButton(position: Vector, size: Size, radius: number, paint: Painter): void;
}
export default Button;
//# sourceMappingURL=button.d.ts.map