import { CloseButton, MirrorButton, RotateButton } from "../buttons";
import UnLockButton from "../buttons/delockButton";
import DragButton from "../buttons/dragbutton";
import LockButton from "../buttons/lockbutton";
import RenderObject from "../interfaces/render-object";
import Painter from "../painter";
import Rect from "../rect";
import Vector from "../vector";
import { Point } from "../vertex";
import Button from "./button";
import OperationObserver from "./operation-observer";
import VerticalButton from "../buttons/verticalButton";
import HorizonButton from "../buttons/horizonButton";
import { ViewObjectFamily } from "../enums";
export type toJsonType = "image" | "text" | "write";
export interface toJSONInterface {
    viewObjType: toJsonType;
    options: Object;
}
/**
 * 凡是带有操作点的对象都是它，
 * 例如 图片、文字 等
 */
declare abstract class ViewObject extends OperationObserver implements RenderObject {
    selected: boolean;
    private scale;
    key: string | number;
    private isMirror;
    disabled: boolean;
    rect: Rect;
    private opacity;
    beforeRect: Rect;
    private funcButton;
    relativeRect: Rect;
    private auxiliary;
    /**
     * @description 是否冻结锁住，
     * 锁住过后可被选取，但是不能位移和改变大小
     */
    private _lock;
    inited: boolean;
    dragButton: DragButton;
    verticalButton: VerticalButton;
    horizonButton: HorizonButton;
    mirrorButton: MirrorButton;
    closeButton: CloseButton;
    lockButton: LockButton;
    delockButton: UnLockButton;
    rotateButton: RotateButton;
    name: string;
    id: string;
    abstract family: ViewObjectFamily;
    originFamily: ViewObjectFamily;
    private layer;
    private background;
    constructor();
    abstract get value(): any;
    /**
     * @description 设置名字
     */
    setName(name: string): void;
    get isBackground(): boolean;
    /**
     * 将对象设置为背景
     */
    toBackground(): void;
    /**
     * 取消图片背景图片
     */
    unBackground(): void;
    init(): void;
    setSize(size: {
        width?: number;
        height?: number;
    }): void;
    unInstallButton(buttons: Array<Button>): void;
    installButton(button: Button): void;
    /**
     * 重置按钮
     */
    resetButtons(excludeNames?: Array<string>): void;
    /**
     * @description 锁住
     */
    lock(): void;
    /**
     * @description 解锁
     */
    unLock(): void;
    /**
     * @description 查看是否锁住
     */
    get isLock(): boolean;
    setLayer(layer: number): void;
    getLayer(): number;
    mirror(): void;
    update(paint: Painter): void;
    abstract setDecoration(args: any): void;
    draw(paint: Painter): void;
    private onLock;
    private onUnLock;
    /**
     * 该方法需要子类实现
     * @param paint
     */
    abstract drawImage(paint: Painter): void;
    /**
     * 被选中后外边框
     * @param paint
     */
    drawSelected(paint: Painter): void;
    /**
     * 对象渲染虚线框
     */
    strokeDashBorder(paint: Painter): void;
    /**
     * 镜像翻转
     */
    setMirror(isMirror: boolean): void;
    /**
     * @description 刷新功能点
     * @param paint
     */
    private updateFuncButton;
    /**
     * @description 功能点是否被点击
     * @param eventPosition
     * @returns
     */
    checkFuncButton(eventPosition: Vector): Button | boolean;
    hide(): void;
    getVertex(): Point[];
    onSelected(): void;
    cancel(): void;
    onUp(paint: Painter): void;
    enlarge(): void;
    narrow(): void;
    private doScale;
    onChanged(): void;
    /**
     * 世界坐标居中
     */
    center(canvasSize: Size, axis?: CenterAxis): Vector;
    /**
     * 撤销 | 取消撤销回调
     */
    didFallback(): void;
    abstract export(painter?: Painter): Promise<Object>;
    abstract exportWeChat(painter?: Painter, canvas?: any): Promise<Object>;
    /**
     * @description 提供公用基础信息导出
     * @returns
     */
    getBaseInfo(): Object;
    /**
     * 自定义一些操作
     */
    custom(): void;
    setPosition(x: number, y: number): void;
    setOpacity(opacity: number): void;
}
export default ViewObject;
//# sourceMappingURL=view-object.d.ts.map