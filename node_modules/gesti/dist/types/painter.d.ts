declare class Painter implements Painter {
    paint: CanvasRenderingContext2D;
    constructor(paint: CanvasRenderingContext2D);
    get canvas(): HTMLCanvasElement;
    set fillStyle(style: string);
    set lineWidth(width: number);
    set strokeStyle(style: string);
    set textBaseLine(baseLine: "top" | "hanging" | "middle" | "alphabetic" | "ideographic" | "bottom");
    draw(): void;
    strokeRect(x: number, y: number, w: number, h: number): void;
    fillRect(x: number, y: number, w: number, h: number): void;
    stroke(): void;
    clearRect(x: number, y: number, w: number, h: number): void;
    save(): void;
    rotate(angle: number): void;
    beginPath(): void;
    closePath(): void;
    restore(): void;
    translate(x: number, y: number): void;
    fill(): void;
    arc(x: number, y: number, radius: number, start: number, end: number): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    /**
     *
     * @param x 圆心点x
     * @param y 圆心点y
     * @param a width
     * @param b height
     */
    ellipse(x: number, y: number, a: number, b: number): void;
    drawImage(image: HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas, x: number, y: number, width: number, height: number, dx?: number, dy?: number, dw?: number, dh?: number): void;
    deepDrawImage(image: HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas, x: number, y: number, width: number, height: number, dx?: number, dy?: number, dw?: number, dh?: number): void;
    scale(a: number, b: number): void;
    moveTo(x: number, y: number): void;
    lineTo(x: number, y: number): void;
    getImageData(x: number, y: number, w: number, h: number): ImageData;
    fillText(text: string, x: number, y: number): void;
    strokeText(text: string, x: number, y: number, maxWidth?: number): void;
    set font(font: string);
    set globalAlpha(alpha: number);
    measureText(text: string): TextMetrics;
    set lineCap(lineCap: any);
    set lineJoin(lineJoin: any);
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    setlineDash(dash: any): void;
    putImageData(imagedata: ImageData, dx: number, dy: number): void;
    update(): void;
}
export default Painter;
//# sourceMappingURL=painter.d.ts.map