import ViewObject from "./abstract/view-object";
import { ViewObjectFamily } from "./enums";
import GestiController from "./interfaces/gesticontroller";
import Rect from "./rect";
import XImage from "./ximage";
type ListenerHook = (viewObject: ViewObject) => void;
declare class ImageToolkit implements GestiController {
    private ViewObjectList;
    private eventHandler;
    private eventHandlerState;
    private drag;
    private gesture;
    private selectedViewObject;
    private offset;
    private canvasRect;
    private paint;
    isDebug: boolean;
    private recorder;
    /**
     * 本次点击是否有选中到对象，谈起时需要置于false
     */
    private _inObjectArea;
    /**
     * 工具
     */
    private tool;
    private listen;
    /**
     * 目前图层的显示状态，0表示隐藏，1表示显示
     */
    private currentViewObjectState;
    private isWriting;
    private writeFactory;
    private hoverViewObject;
    private snapshot;
    private sleep;
    private boundary;
    get getCanvasRect(): Rect;
    get getViewObjects(): ViewObject[];
    constructor(paint: CanvasRenderingContext2D, rect: rectparams);
    setBoundary(boundaryRect: Boundary): void;
    querySelector(select: string | ViewObjectFamily): Promise<ViewObject | ViewObject[]>;
    getViewObjectById<T extends ViewObject>(id: string): Promise<T>;
    position(x: number, y: number, view?: ViewObject): void;
    /**
     * @description 清空所有元素
     * @returns
     */
    cleanAll(): Promise<void>;
    destroyGesti(): void;
    load(view: ViewObject): void;
    select(select: ViewObject): Promise<void>;
    get currentViewObject(): ViewObject;
    rotate(angle: number, existing?: boolean, view?: ViewObject): Promise<void>;
    upward(viewObject?: ViewObject): number;
    downward(viewObject?: ViewObject): number;
    leftward(viewObject?: ViewObject): number;
    rightward(viewObject?: ViewObject): number;
    /**
     * @description 导入json解析成对象  H5
     * @param json
     * @returns
     */
    importAll(json: string): Promise<void>;
    /**
     * @description 微信专用导入
     * @param json
     * @param weChatCanvas
     * @returns
     */
    importAllWithWeChat(json: string, weChatCanvas: any): Promise<void>;
    addListener(listenType: GestiControllerListenerTypes, hook: ListenerHook, prepend?: boolean): any;
    removeListener(listenType: GestiControllerListenerTypes, hook: (object: any) => void): void;
    /**
     * @description 导出画布内所有对象成json字符串
     */
    exportAll(offScreenPainter: CanvasRenderingContext2D, type?: "H5" | "WeChat"): Promise<string>;
    /**
     * @description 导出画布内所有对象成json字符串  微信
     */
    exportAllWithWeChat(offScreenPainter: CanvasRenderingContext2D): Promise<string>;
    updateText(text: string, options?: textOptions): void;
    center(axis?: CenterAxis, view?: ViewObject): void;
    cancel(view?: ViewObject): void;
    cancelAll(): void;
    layerLower(view?: ViewObject): void;
    layerRise(view?: ViewObject): void;
    layerTop(view?: ViewObject): void;
    layerBottom(view?: ViewObject): void;
    unLock(view?: ViewObject): void;
    lock(view?: ViewObject): void;
    fallback(): Promise<void>;
    cancelFallback(): Promise<void>;
    down(e: Event): void;
    up(e: Event): void;
    move(e: Event): void;
    wheel(e: Event): void;
    createImage(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | Blob | ImageData | ImageBitmap | OffscreenCanvas, options?: createImageOptions): Promise<XImage>;
    private bindEvent;
    /**
     * 添加手势的动作，长按，双击，点击等
     * @description 只有在选中对象时该监听才生效
     */
    addListening(): void;
    wakeUp(): void;
    cancelEvent(): void;
    onDown(v: GestiEventParams): void;
    onMove(v: GestiEventParams): void;
    onUp(v: GestiEventParams): void;
    onWheel(e: WheelEvent): void;
    /**
     * 传入一个Vector坐标判断是否选中了图册
     * @param event
     */
    private clickViewObject;
    private correctEventPosition;
    private checkFuncButton;
    private callHook;
    private addViewObject;
    update(): void;
    /**
     * 扫除没用的对象，根据大小判断
     * 清扫细微到不可见的对象
     * @param item
     */
    private cleaning;
    /**
     * @description 新增图片
     * @param ximage
     * @returns
     */
    addImage(ximage: XImage): Promise<ViewObject>;
    /**
     * @description 新增文字
     * @param text
     * @param options
     * @returns
     */
    addText(text: string, options?: textOptions): Promise<ViewObject>;
    addWrite(options: {
        type: "circle" | "write" | "line" | "rect" | "none";
        lineWidth?: number;
        color?: string;
        isFill?: boolean;
    }): void;
    private debug;
}
export default ImageToolkit;
//# sourceMappingURL=image-toolkit.d.ts.map