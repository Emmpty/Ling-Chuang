import Button from "../abstract/button";
import ViewObject from "../abstract/view-object";
import { gesticonfig } from "../config/gestiConfig";
import Gesti from "../gesti";
import TextBox from "../viewObject/text";
import XImage from "../ximage";
declare const createGesti: (config?: gesticonfig) => Gesti;
/**
 * Hook 分发
 */
declare const onSelected: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onHover: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onLeave: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onCancel: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onHide: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onUpdate: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onLoad: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onDestroy: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const onBeforeDestroy: (hook: (_args: any) => any, target?: Gesti, prepend?: boolean) => (_args: any) => void;
declare const removeListener: (type: GestiControllerListenerTypes, hook: (_args: any) => any, target?: Gesti) => void;
declare const useController: (target?: Gesti) => import("../interfaces/gesticontroller").default;
/**
 * 添加预设图形
 */
declare const addVerticalLine: (target?: Gesti) => Promise<ViewObject>;
declare const addHorizonLine: (target?: Gesti) => Promise<ViewObject>;
declare const addRect: (target?: Gesti) => Promise<ViewObject>;
declare const addCircle: (target?: Gesti) => Promise<ViewObject>;
/**
 * 创建可操作对象
 */
declare const createTextBox: (text: string, options?: textOptions) => TextBox;
declare const createImageBox: (xImage: XImage) => import("../viewObject/image").default;
/**
 * @description 踩踩踩
 * @param option
 * @returns
 */
declare const createXImage: (option: {
    data: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | Blob | ImageData | ImageBitmap | OffscreenCanvas;
    originData?: any;
    width: number;
    height: number;
    scale?: number;
    maxScale?: number;
    minScale?: number;
}) => XImage;
/**
 * @description 使用文字控制Hook
 * @param textBox
 * @param target
 * @returns
 */
declare const useTextHandler: (textBox: TextBox, target?: Gesti) => (text: string, options?: textOptions) => void | Promise<never>;
/**
 * @description 将可操作对象载入到画布内
 * @param view
 * @param target
 * @returns
 */
declare const loadToGesti: (view: ViewObject, target?: Gesti) => void;
declare const useGraffitiRect: (option?: {
    lineWidth?: number;
    color?: string;
    isFill?: boolean;
}, target?: Gesti) => void;
declare const useGraffitiCircle: (option?: {
    lineWidth?: number;
    color?: string;
    isFill?: boolean;
}, target?: Gesti) => void;
declare const useGraffitiLine: (option?: {
    lineWidth?: number;
    color?: string;
    isFill?: boolean;
}, target?: Gesti) => void;
declare const useGraffitiWrite: (option?: {
    lineWidth?: number;
    color?: string;
    isFill?: boolean;
}, target?: Gesti) => void;
declare const useCloseGraffiti: (option?: {
    lineWidth?: number;
    color?: string;
    isFill?: boolean;
}, target?: Gesti) => void;
/**
 * @description H5专用,导入json到画布内,该json数据格式必须由 exportAll Hook导出
 * @param json
 * @param target
 * @returns
 */
declare const importAll: (json: string, target?: Gesti) => Promise<void>;
/**
 * @description 导入json到画布内,该json数据格式必须由 exportAll Hook导出
 * @param json
 * @param weChatCanvas 微信小程序离屏画布
 * @param target
 * @returns
 */
declare const importAllWithWeChat: (json: string, weChatCanvas: any, target?: Gesti) => Promise<void>;
/**
 * @description H5专用,导出可操作对象为json格式的 Array\<Object\>
 * 注意: 功能使用离屏渲染
 * @param target
 * @returns
 */
declare const exportAll: (offscreenPainter: CanvasRenderingContext2D, target?: Gesti) => Promise<string>;
/**
 * @description 微信小程序专用,导出可操作对象为json格式的 Array\<Object\>
 * 注意: 功能使用离屏渲染
 * @param target
 * @returns
 */
declare const exportAllWithWeChat: (offscreenPainter: CanvasRenderingContext2D, target?: Gesti) => Promise<string>;
declare const createDragButton: (view: ViewObject) => Button;
declare const createHorizonButton: (view: ViewObject) => Button;
declare const createRotateButton: (view: ViewObject) => Button;
declare const createLockButton: (view: ViewObject) => Button;
declare const createUnlockButton: (view: ViewObject) => Button;
declare const createCloseButton: (view: ViewObject) => Button;
declare const createVerticalButton: (view: ViewObject) => Button;
declare const createMirrorButton: (view: ViewObject) => Button;
/**
 * @description 给某个可操作对象安装按钮
 * @param view
 * @param button
 */
declare const installButton: (view: ViewObject, button: Button | Array<Button>) => void;
declare const unInstallButton: (view: ViewObject, button: Button | Array<Button>) => void;
declare const doSelect: (view?: ViewObject, target?: Gesti) => void;
declare const doLayerLower: (view?: ViewObject, target?: Gesti) => void;
declare const doLayerBottom: (view?: ViewObject, target?: Gesti) => void;
declare const doLayerTop: (view?: ViewObject, target?: Gesti) => void;
declare const doLayerRise: (view?: ViewObject, target?: Gesti) => void;
declare const doLock: (view?: ViewObject, target?: Gesti) => void;
declare const doUnLock: (view?: ViewObject, target?: Gesti) => void;
declare const doUpward: (view?: ViewObject, target?: Gesti) => void;
declare const doDownward: (view?: ViewObject, target?: Gesti) => void;
declare const doLeftward: (view?: ViewObject, target?: Gesti) => void;
declare const doRightward: (view?: ViewObject, target?: Gesti) => void;
declare const doUpdate: (view?: ViewObject, target?: Gesti) => void;
declare const doCancel: (view?: ViewObject, target?: Gesti) => void;
declare const doCancelAll: (view?: ViewObject, target?: Gesti) => void;
/**
 * @description 取消Gesti原有提供的手势监听，
 * 注意：取消后你会失去所有的跟Gesti内元素交互的事件，需要自己实现手势监听
 * 详情在文档内查看 drive 系列
 */
declare const doCancelEvent: (view?: ViewObject, target?: Gesti) => void;
declare const doDestroyGesti: (view?: ViewObject, target?: Gesti) => void;
declare const doCleanAll: (view?: ViewObject, target?: Gesti) => void;
declare const doCenter: (axis?: CenterAxis, view?: ViewObject, target?: Gesti) => void;
declare const doPosition: (x: number, y: number, view?: ViewObject, target?: Gesti) => void;
/**
 * @description 旋转某个元素
 * @param angle
 * @param existing
 * @param view
 * @param target
 */
declare const doRotate: (angle: number, existing?: boolean, view?: ViewObject, target?: Gesti) => void;
/**
 * 已弃用，请使用 useReaderH5 或者useReaderWeChat
 * 转换json成可读取对象
 * @param json
 * @deprecated
 * @returns
 */
declare const useReader: (json: string) => Promise<ViewObject>;
/**
 * @description 转换json为可读对象 H5专用
 * @param json 特定格式json
 * @returns
 */
declare const useReaderH5: (json: string) => Promise<ViewObject>;
/**
 * @description 转换json为可读对象 微信小程序专用
 * @param json 特定格式json
 * @param painter 画笔
 * @param weChatCanvas 画布
 * @returns
 */
declare const useReaderWeChat: (json: string, painter: CanvasRenderingContext2D, weChatCanvas: any) => Promise<ViewObject>;
/**
 * @description 获取当前选中对象
 * @param target
 * @returns
 */
declare const currentViewObject: (target?: Gesti) => ViewObject;
/**
 * @description 获取节点
 * @param type
 * @returns
 */
declare const useGetViewObjectById: (target?: Gesti) => <T extends ViewObject>(id: string) => Promise<T>;
declare const driveMove: (e: MouseEvent | Event | EventHandle, target?: Gesti) => void;
declare const driveUp: (e: MouseEvent | Event | EventHandle, target?: Gesti) => void;
declare const driveDown: (e: MouseEvent | Event | EventHandle, target?: Gesti) => void;
declare const driveWheel: (e: MouseEvent | Event | EventHandle, target?: Gesti) => void;
export { createGesti /**创建Gesti实例 */, onSelected, useController, onHover, onLeave /**鼠标离开可操作对象时 */, onCancel, onHide, onUpdate, onDestroy, onBeforeDestroy, onLoad /**载入新的对象到画布内时 */, addVerticalLine /**新增预设垂直线到画布内 */, addHorizonLine /**新增预设水平线到画布内 */, addRect /**新增预设矩形到画布内 */, addCircle /**新增预设圆形到画布内 */, useTextHandler /**得到一个可操控文字对象控制器 */, createTextBox /**创建文字对象 */, loadToGesti /**加载某个可操作对象到画布内 */, createXImage /**创建一个XImage对象 */, createImageBox /**创建一个ImageBox对象 */, useGraffitiRect /**使用涂鸦 矩形 */, useGraffitiCircle /**使用涂鸦 圆形*/, useGraffitiLine /**使用涂鸦 线 */, useGraffitiWrite /**使用涂鸦 书写 */, useCloseGraffiti /**关闭涂鸦输入 */, importAll, exportAll, importAllWithWeChat, exportAllWithWeChat, createDragButton, createHorizonButton, createVerticalButton, createRotateButton, createLockButton, createUnlockButton, createMirrorButton, createCloseButton, installButton /**安装按钮*/, unInstallButton /**卸载按钮 */, doSelect, doRotate, doLayerLower, doLayerBottom, doLayerTop, doLayerRise, doLock, doUnLock, doUpward, doDownward, doLeftward, doPosition, doRightward, doCenter, doUpdate, doDestroyGesti, useReader, currentViewObject, doCancel, driveMove, driveUp, driveDown, driveWheel, doCancelEvent, doCancelAll, doCleanAll, removeListener, useReaderH5, useReaderWeChat, useGetViewObjectById, };
//# sourceMappingURL=index.d.ts.map