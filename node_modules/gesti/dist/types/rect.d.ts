import { ObserverObj } from "./abstract/operation-observer";
import Vector from "./vector";
import Vertex from "./vertex";
/**
 * @ 拖拽的回调函数
 */
declare interface onDragFunction {
    (rect: Rect): void;
}
declare class Size {
    width: number;
    height: number;
    constructor(width: number, height: number);
    toVector(): Vector;
    copy(): Size;
}
declare class Rect extends ObserverObj {
    onDrag: onDragFunction;
    beforeDrag: onDragFunction;
    private _angle;
    private _vertex;
    private _position;
    private _size;
    private _scale;
    readonly key: string;
    constructor(params?: rectparams, key?: string, options?: {
        angle: number;
    });
    updateVertex(): void;
    get position(): Vector;
    get size(): Size;
    get scale(): number;
    get vertex(): Vertex;
    get getAngle(): number;
    set position(position: Vector);
    setPosition(position: Vector): void;
    setScale(scale: number, change?: boolean): void;
    /**
     * @description 拖拽处需要表明拖拽
     * @param width
     * @param height
     */
    setSize(width: number, height: number, isDrag?: boolean): void;
    setAngle(angle: number, isDrag?: boolean): void;
    /**
     * @description 向观察者汇报自己的变化情况
     * @param value
     * @param type
     * @returns
     */
    private report;
    /**
     * @description 向观察者汇报自己的变化情况之前
     * @param value
     * @param type
     * @returns
     */
    private beforeReport;
    copy(key?: string): Rect;
    set(newRect: Rect): void;
}
export default Rect;
export { onDragFunction, };
//# sourceMappingURL=rect.d.ts.map