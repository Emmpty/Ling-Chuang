import ViewObject from "./abstract/view-object";
import { ViewObjectFamily } from "./enums";
import ImageToolkit from "./image-toolkit";
import GestiController from "./interfaces/gesticontroller";
import XImage from "./ximage";
declare interface textOptions {
    fontFamily?: string;
    fontSize?: number;
    spacing?: number;
    color?: string;
    linesMarks?: Array<number>;
    lineWidth?: number;
    lineColor?: string;
    lineOffsetY?: number;
}
declare type CenterAxis = "vertical" | "horizon";
declare class GesteControllerImpl implements GestiController {
    /**
     * @ImageToolkit
     * @private
     */
    private kit;
    constructor(kit: ImageToolkit);
    setBoundary(boundaryRect: Boundary): void;
    querySelector(select: string | ViewObjectFamily): Promise<ViewObject | ViewObject[]>;
    getViewObjectById<T extends ViewObject>(id: string): Promise<T>;
    /**
     * @description 设置某个对象的位置
     * @param x
     * @param y
     * @param view
     */
    position(x: number, y: number, view?: ViewObject): void;
    /**
     * @description 微信小程序导出
     * @param offScreenPainter 离屏画笔
     * @returns
     */
    exportAllWithWeChat(offScreenPainter: CanvasRenderingContext2D): Promise<string>;
    /**
       * @description 微信小程序导入
       * @param offScreenPainter 离屏画布
       * @returns
       */
    importAllWithWeChat(json: string, weChatCanvas: any): Promise<void>;
    cleanAll(): Promise<void>;
    destroyGesti(): void;
    removeListener(listenType: GestiControllerListenerTypes, hook: (object: any) => void): void;
    load(view: ViewObject): void;
    select(select: ViewObject): Promise<void>;
    get currentViewObject(): ViewObject;
    rotate(angle: number, existing?: boolean, view?: ViewObject): Promise<void>;
    upward(viewObject?: ViewObject): number;
    downward(viewObject?: ViewObject): number;
    leftward(viewObject?: ViewObject): number;
    rightward(viewObject?: ViewObject): number;
    importAll(json: string): Promise<void>;
    exportAll(offScreenPainter: CanvasRenderingContext2D): Promise<string>;
    addWrite(options: {
        type: "circle" | "write" | "line" | "rect" | "none";
        lineWidth?: number;
        color?: string;
        isFill?: boolean;
    }): void;
    addListener(listenType: GestiControllerListenerTypes, callback: (obj: any) => void, prepend?: boolean): any;
    updateText(text: string, options?: textOptions): void;
    center(axis?: CenterAxis, view?: ViewObject): void;
    addText(text: string, options?: textOptions): Promise<ViewObject>;
    cancel(view?: ViewObject): void;
    cancelAll(): void;
    layerLower(view?: ViewObject): void;
    layerRise(view?: ViewObject): void;
    layerTop(view?: ViewObject): void;
    layerBottom(view?: ViewObject): void;
    update(): void;
    cancelEvent(): void;
    unLock(view?: ViewObject): void;
    lock(view?: ViewObject): void;
    fallback(): void;
    cancelFallback(): void;
    /**
     * @param {Event} e
     * @description  点击
     * @public
     */
    down(e: MouseEvent | Event | EventHandle): void;
    /**
     * @param {Event} e
     * @description 移动
     * @public
     */
    move(e: MouseEvent | Event | EventHandle): void;
    /**
     * @param {Event} e
     * @description 抬起
     * @public
     */
    up(e: MouseEvent | Event | EventHandle): void;
    /**
     * @param {Event} e
     * @description 鼠标滚轮
     * @public
     */
    wheel(e: MouseEvent | Event | EventHandle): void;
    /**
     * @param {Event} e
     * @param {Function} callback
     * @description 判断是移动端还是Pc端
     * @private
     */
    private eventTransForm;
    /**
     * @param {Array<Event>} touches
     * @return Array<Vector>
     */
    private twoFingers;
    /**
     * @param {Event} _e
     * @param {Function} callback
     * @description 移动端分为微信和browser
     * @private
     */
    private action;
    addImage(ximage: XImage | Promise<XImage>): Promise<ViewObject>;
    /**
     * @description 根据传入的image生成一个 @ImageBitmap 实例，拿到图片的宽高数据，创建XImage对象
     * @param image
     * @param options
     * @returns Promise< @XImage >
     */
    createImage(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | Blob | ImageData | ImageBitmap | OffscreenCanvas, options?: createImageOptions): Promise<XImage>;
}
export default GesteControllerImpl;
//# sourceMappingURL=controller.d.ts.map