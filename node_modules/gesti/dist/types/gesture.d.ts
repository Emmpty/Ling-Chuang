import ViewObject from "./abstract/view-object";
import Vector from "./vector";
/**
 * 添加点击事件时触发
 */
type listenCallback = (ViewObject: ViewObject, position: Vector | Vector[]) => void;
type GlobalListenCallback = (position: Vector | Vector[]) => void;
/**
 * 该类为手势判断类
 * 点击
 * 抬起
 * 滑动
 * 双击
 * 长按
 *
 * ！！！ 双击和长按等手势只支持单指
 * ！！！待优化，单击和双击存在竞争问题
 */
declare class Gesture {
    private longPressTimeout;
    private dbClickTimeout;
    private clickTimeout;
    private pressTime;
    private downTime;
    private upTime;
    private preUpTime;
    private pressVector;
    private upVector;
    private clickEventList;
    private dbclickEventList;
    private longpressEventList;
    private twoTouchEventList;
    private globalClickEventList;
    private globalDownEventList;
    private operate;
    private startPosition;
    private endPosition;
    private isTwoFingers;
    onUp(ViewObject: ViewObject, position: Vector | Vector[]): void;
    onMove(ViewObject: ViewObject, position: Vector | Vector[]): void;
    onDown(ViewObject: ViewObject, position: Vector | Vector[]): void;
    get isLonePress(): boolean;
    get isDbClick(): boolean;
    get isClick(): boolean;
    /**
     * 二指操作
     * @param ViewObject
     * @param start
     */
    private onTwoFingers;
    /**
     * @description 长按操作
     * @param ViewObject
     * @param start
     */
    private onLonePress;
    private onDbClick;
    private onClick;
    private onGlobalClick;
    /**
     * @description 添加监听事件
     * @param gestiType
     * @param listenCallback
     */
    addListenGesti(gestiType: "click" | "longpress" | "dbclick" | 'twotouch' | 'globalClick', listenCallback: listenCallback | GlobalListenCallback): void;
    cancel(): void;
    update(positions: Vector[]): void;
}
export default Gesture;
//# sourceMappingURL=gesture.d.ts.map